// Code generated by gen/generate.go. DO NOT EDIT.
// make edits in gen/generate.go

// Copyright 2022 The GithubEvents Authors. All rights reserved.
// Use of this source code is governed by the MIT License
// that can be found in the LICENSE file.

package githubevents

import (
	"context"
	"fmt"
	"github.com/google/go-github/v70/github"
	"golang.org/x/sync/errgroup"
)

// Actions are used to identify registered callbacks.
const (
	// CustomPropertyValuesEvent is the event name of github.CustomPropertyValuesEvent's
	CustomPropertyValuesEvent = "custom_property_values"

	// CustomPropertyValuesEventAnyAction is used to identify callbacks
	// listening to all events of type github.CustomPropertyValuesEvent
	CustomPropertyValuesEventAnyAction = "*"

	// CustomPropertyValuesEventUpdatedAction is used to identify callbacks
	// listening to events of type github.CustomPropertyValuesEvent and action "updated"
	CustomPropertyValuesEventUpdatedAction = "updated"
)

// CustomPropertyValuesEventHandleFunc represents a callback function triggered on github.CustomPropertyValuesEvent's.
// 'deliveryID' (type: string) is the unique webhook delivery ID.
// 'eventName' (type: string) is the name of the event.
// 'event' (type: *github.CustomPropertyValuesEvent) is the webhook payload.
type CustomPropertyValuesEventHandleFunc func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyValuesEvent) error

// OnCustomPropertyValuesEventUpdated registers callbacks listening to events of type github.CustomPropertyValuesEvent and action 'updated'.
//
// This function appends the callbacks passed as arguments to already existing ones.
// If already existing callbacks are to be overwritten, SetOnCustomPropertyValuesEventUpdated must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property_values
func (g *EventHandler) OnCustomPropertyValuesEventUpdated(callbacks ...CustomPropertyValuesEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyValuesEvent == nil {
		g.onCustomPropertyValuesEvent = make(map[string][]CustomPropertyValuesEventHandleFunc)
	}
	g.onCustomPropertyValuesEvent[CustomPropertyValuesEventUpdatedAction] = append(
		g.onCustomPropertyValuesEvent[CustomPropertyValuesEventUpdatedAction],
		callbacks...,
	)
}

// SetOnCustomPropertyValuesEventUpdated registers callbacks listening to events of type github.CustomPropertyValuesEvent and action 'updated'
// and overwrites already registered callbacks.
//
// This function overwrites all previously registered callbacks.
// If already registered callbacks are not to be overwritten, OnCustomPropertyValuesEventUpdatedAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property_values
func (g *EventHandler) SetOnCustomPropertyValuesEventUpdated(callbacks ...CustomPropertyValuesEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyValuesEvent == nil {
		g.onCustomPropertyValuesEvent = make(map[string][]CustomPropertyValuesEventHandleFunc)
	}
	g.onCustomPropertyValuesEvent[CustomPropertyValuesEventUpdatedAction] = callbacks
}

func (g *EventHandler) handleCustomPropertyValuesEventUpdated(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyValuesEvent) error {
	if event == nil || event.Action == nil || *event.Action == "" {
		return fmt.Errorf("event action was empty or nil")
	}
	if CustomPropertyValuesEventUpdatedAction != *event.Action {
		return fmt.Errorf(
			"handleCustomPropertyValuesEventUpdated() called with wrong action, want %s, got %s",
			CustomPropertyValuesEventUpdatedAction,
			*event.Action,
		)
	}
	eg := new(errgroup.Group)
	for _, action := range []string{
		CustomPropertyValuesEventUpdatedAction,
		CustomPropertyValuesEventAnyAction,
	} {
		if _, ok := g.onCustomPropertyValuesEvent[action]; ok {
			for _, h := range g.onCustomPropertyValuesEvent[action] {
				handle := h
				eg.Go(func() (err error) {
					defer func() {
						if r := recover(); r != nil {
							err = fmt.Errorf("recovered from panic: %v", r)
						}
					}()
					err = handle(ctx, deliveryID, eventName, event)
					if err != nil {
						return err
					}
					return nil
				})
			}
		}
	}
	if err := eg.Wait(); err != nil {
		return err
	}
	return nil
}

// OnCustomPropertyValuesEventAny registers callbacks listening to any events of type github.CustomPropertyValuesEvent
//
// This function appends the callbacks passed as arguments to already existing ones.
// If already existing callbacks are to be overwritten, SetOnCustomPropertyValuesEventAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property_values
func (g *EventHandler) OnCustomPropertyValuesEventAny(callbacks ...CustomPropertyValuesEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyValuesEvent == nil {
		g.onCustomPropertyValuesEvent = make(map[string][]CustomPropertyValuesEventHandleFunc)
	}
	g.onCustomPropertyValuesEvent[CustomPropertyValuesEventAnyAction] = append(
		g.onCustomPropertyValuesEvent[CustomPropertyValuesEventAnyAction],
		callbacks...,
	)
}

// SetOnCustomPropertyValuesEventAny registers callbacks listening to any events of type github.CustomPropertyValuesEvent
// and overwrites already registered callbacks.
//
// This function overwrites all previously registered callbacks.
// If already registered callbacks are not to be overwritten, OnCustomPropertyValuesEventAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property_values
func (g *EventHandler) SetOnCustomPropertyValuesEventAny(callbacks ...CustomPropertyValuesEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyValuesEvent == nil {
		g.onCustomPropertyValuesEvent = make(map[string][]CustomPropertyValuesEventHandleFunc)
	}
	g.onCustomPropertyValuesEvent[CustomPropertyValuesEventAnyAction] = callbacks
}

func (g *EventHandler) handleCustomPropertyValuesEventAny(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyValuesEvent) error {
	if event == nil {
		return fmt.Errorf("event was empty or nil")
	}
	if _, ok := g.onCustomPropertyValuesEvent[CustomPropertyValuesEventAnyAction]; !ok {
		return nil
	}
	eg := new(errgroup.Group)
	for _, h := range g.onCustomPropertyValuesEvent[CustomPropertyValuesEventAnyAction] {
		handle := h
		eg.Go(func() (err error) {
			defer func() {
				if r := recover(); r != nil {
					err = fmt.Errorf("recovered from panic: %v", r)
				}
			}()
			err = handle(ctx, deliveryID, eventName, event)
			if err != nil {
				return err
			}
			return nil
		})
	}
	if err := eg.Wait(); err != nil {
		return err
	}
	return nil
}

// CustomPropertyValuesEvent handles github.CustomPropertyValuesEvent.
//
// Callbacks are executed in the following order:
//
// 1) All callbacks registered with OnBeforeAny are executed in parallel.
// 2) All callbacks registered with OnCustomPropertyValuesEvent... are executed in parallel in case the Event has actions.
// 3) All callbacks registered with OnAfterAny are executed in parallel.
//
// on any error all callbacks registered with OnError are executed in parallel.
func (g *EventHandler) CustomPropertyValuesEvent(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyValuesEvent) error {

	if event == nil || event.Action == nil || *event.Action == "" {
		return fmt.Errorf("event action was empty or nil")
	}
	action := *event.Action

	err := g.handleBeforeAny(ctx, deliveryID, eventName, event)
	if err != nil {
		return g.handleError(ctx, deliveryID, eventName, event, err)
	}

	switch action {

	case CustomPropertyValuesEventUpdatedAction:
		err := g.handleCustomPropertyValuesEventUpdated(ctx, deliveryID, eventName, event)
		if err != nil {
			return g.handleError(ctx, deliveryID, eventName, event, err)
		}

	default:
		err := g.handleCustomPropertyValuesEventAny(ctx, deliveryID, eventName, event)
		if err != nil {
			return g.handleError(ctx, deliveryID, eventName, event, err)
		}
	}

	err = g.handleAfterAny(ctx, deliveryID, eventName, event)
	if err != nil {
		return g.handleError(ctx, deliveryID, eventName, event, err)
	}
	return nil
}
