// Code generated by gen/generate.go. DO NOT EDIT.
// make edits in gen/generate.go

// Copyright 2022 The GithubEvents Authors. All rights reserved.
// Use of this source code is governed by the MIT License
// that can be found in the LICENSE file.

package githubevents

import (
	"context"
	"errors"
	"github.com/google/go-github/v70/github"
	"sync"
	"testing"
)

func TestOnCustomPropertyEventAny(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple CustomPropertyEventHandleFuncs",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventAny(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventAnyAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onCustomPropertyEvent[CustomPropertyEventAnyAction]))
			}
		})
	}
}

func TestSetOnCustomPropertyEventAny(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple CustomPropertyEventHandleFuncs",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnCustomPropertyEventAny(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				return nil
			})
			g.SetOnCustomPropertyEventAny(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventAnyAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onCustomPropertyEvent[CustomPropertyEventAnyAction]), tt.want)
			}
		})
	}
}

func TestHandleCustomPropertyEventAny(t *testing.T) {

	action := "*"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.CustomPropertyEvent
		fail       bool
		panic      bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",

				event: &github.CustomPropertyEvent{Action: &action},

				fail: false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",

				event: &github.CustomPropertyEvent{Action: &action},

				fail: true,
			},
			wantErr: true,
		},
		{
			name: "must fail with error on panic recover",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",

				event: &github.CustomPropertyEvent{Action: &action},

				fail:  false,
				panic: true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventAny(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				if tt.args.panic {
					panic("fake panic")
				}
				return nil
			})
			if err := g.handleCustomPropertyEventAny(context.Background(), tt.args.deliveryID, tt.args.deliveryID, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("TestHandleCustomPropertyEventAny() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestOnCustomPropertyEventCreated(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventCreated(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventCreatedAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onCustomPropertyEvent[CustomPropertyEventCreatedAction]))
			}
		})
	}
}

func TestSetOnCustomPropertyEventCreated(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple CustomPropertyEventHandleFuncs",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnCustomPropertyEventCreated(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				return nil
			})
			g.SetOnCustomPropertyEventCreated(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventCreatedAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onCustomPropertyEvent[CustomPropertyEventCreatedAction]), tt.want)
			}
		})
	}
}

func TestHandleCustomPropertyEventCreated(t *testing.T) {
	action := CustomPropertyEventCreatedAction

	emptyAction := ""
	fakeAction := "doesntexist"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.CustomPropertyEvent
		fail       bool
		panic      bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       true,
			},
			wantErr: true,
		},
		{
			name: "must fail with error on panic recover",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
				panic:      true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail with wrong action",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &fakeAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action empty",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &emptyAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventCreated(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				if tt.args.panic {
					panic("fake panic")
				}
				return nil
			})
			if err := g.handleCustomPropertyEventCreated(context.Background(), tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("handleCustomPropertyEventCreated() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestOnCustomPropertyDeleted(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyDeleted(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyDeletedAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onCustomPropertyEvent[CustomPropertyDeletedAction]))
			}
		})
	}
}

func TestSetOnCustomPropertyDeleted(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple CustomPropertyEventHandleFuncs",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnCustomPropertyDeleted(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				return nil
			})
			g.SetOnCustomPropertyDeleted(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyDeletedAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onCustomPropertyEvent[CustomPropertyDeletedAction]), tt.want)
			}
		})
	}
}

func TestHandleCustomPropertyDeleted(t *testing.T) {
	action := CustomPropertyDeletedAction

	emptyAction := ""
	fakeAction := "doesntexist"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.CustomPropertyEvent
		fail       bool
		panic      bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       true,
			},
			wantErr: true,
		},
		{
			name: "must fail with error on panic recover",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
				panic:      true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail with wrong action",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &fakeAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action empty",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &emptyAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyDeleted(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				if tt.args.panic {
					panic("fake panic")
				}
				return nil
			})
			if err := g.handleCustomPropertyDeleted(context.Background(), tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("handleCustomPropertyDeleted() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestOnCustomPropertyEventPromoteToEnterprise(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventPromoteToEnterprise(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventPromoteToEnterpriseAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onCustomPropertyEvent[CustomPropertyEventPromoteToEnterpriseAction]))
			}
		})
	}
}

func TestSetOnCustomPropertyEventPromoteToEnterprise(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple CustomPropertyEventHandleFuncs",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnCustomPropertyEventPromoteToEnterprise(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				return nil
			})
			g.SetOnCustomPropertyEventPromoteToEnterprise(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventPromoteToEnterpriseAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onCustomPropertyEvent[CustomPropertyEventPromoteToEnterpriseAction]), tt.want)
			}
		})
	}
}

func TestHandleCustomPropertyEventPromoteToEnterprise(t *testing.T) {
	action := CustomPropertyEventPromoteToEnterpriseAction

	emptyAction := ""
	fakeAction := "doesntexist"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.CustomPropertyEvent
		fail       bool
		panic      bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       true,
			},
			wantErr: true,
		},
		{
			name: "must fail with error on panic recover",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
				panic:      true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail with wrong action",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &fakeAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action empty",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &emptyAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventPromoteToEnterprise(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				if tt.args.panic {
					panic("fake panic")
				}
				return nil
			})
			if err := g.handleCustomPropertyEventPromoteToEnterprise(context.Background(), tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("handleCustomPropertyEventPromoteToEnterprise() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestOnCustomPropertyEventUpdated(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
		{
			name: "must add multiple CustomPropertyEventHandleFunc",
			args: args{
				callbacks: []CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventUpdated(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventUpdatedAction]) == 0 {
				t.Errorf("failed to add callbacks, got %d", len(g.onCustomPropertyEvent[CustomPropertyEventUpdatedAction]))
			}
		})
	}
}

func TestSetOnCustomPropertyEventUpdated(t *testing.T) {
	type args struct {
		callbacks []CustomPropertyEventHandleFunc
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "must add single CustomPropertyEventHandleFunc",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 1,
		},
		{
			name: "must add multiple CustomPropertyEventHandleFuncs",
			args: args{
				[]CustomPropertyEventHandleFunc{
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
					func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
						return nil
					},
				},
			},
			want: 2,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			// add callbacks to be overwritten
			g.SetOnCustomPropertyEventUpdated(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				return nil
			})
			g.SetOnCustomPropertyEventUpdated(tt.args.callbacks...)
			if len(g.onCustomPropertyEvent[CustomPropertyEventUpdatedAction]) != tt.want {
				t.Errorf("failed to add callbacks, got %d, want %d", len(g.onCustomPropertyEvent[CustomPropertyEventUpdatedAction]), tt.want)
			}
		})
	}
}

func TestHandleCustomPropertyEventUpdated(t *testing.T) {
	action := CustomPropertyEventUpdatedAction

	emptyAction := ""
	fakeAction := "doesntexist"

	type args struct {
		deliveryID string
		eventName  string
		event      *github.CustomPropertyEvent
		fail       bool
		panic      bool
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "must pass",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
			},
			wantErr: false,
		},
		{
			name: "must fail with error",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       true,
			},
			wantErr: true,
		},
		{
			name: "must fail with error on panic recover",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &action},
				fail:       false,
				panic:      true,
			},
			wantErr: true,
		},
		{
			name: "must fail event nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      nil,
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail with wrong action",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &fakeAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action empty",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: &emptyAction},
				fail:       false,
			},
			wantErr: true,
		},
		{
			name: "must fail event action nil",
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
				fail:       false,
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := New("fake")
			g.OnCustomPropertyEventUpdated(func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
				if tt.args.fail {
					return errors.New("fake error")
				}
				if tt.args.panic {
					panic("fake panic")
				}
				return nil
			})
			if err := g.handleCustomPropertyEventUpdated(context.Background(), tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("handleCustomPropertyEventUpdated() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestCustomPropertyEvent(t *testing.T) {
	type fields struct {
		handler *EventHandler
	}
	type args struct {
		deliveryID string
		eventName  string
		event      *github.CustomPropertyEvent
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
		{
			name: "must trigger CustomPropertyEventAny with unknown event action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  CustomPropertyEvent,

				event: &github.CustomPropertyEvent{Action: ptrString("unknown")},
			},
			wantErr: false,
		},

		{
			name: "must trigger CustomPropertyEventCreated",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventCreatedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventCreatedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString(CustomPropertyEventCreatedAction)},
			},
			wantErr: false,
		},
		{
			name: "must fail CustomPropertyEventCreated with empty action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventCreatedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventCreatedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString("")},
			},
			wantErr: true,
		},
		{
			name: "must fail CustomPropertyEventCreated with nil action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventCreatedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventCreatedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
			},
			wantErr: true,
		},

		{
			name: "must trigger CustomPropertyDeleted",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyDeletedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyDeletedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString(CustomPropertyDeletedAction)},
			},
			wantErr: false,
		},
		{
			name: "must fail CustomPropertyDeleted with empty action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyDeletedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyDeletedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString("")},
			},
			wantErr: true,
		},
		{
			name: "must fail CustomPropertyDeleted with nil action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyDeletedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyDeletedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
			},
			wantErr: true,
		},

		{
			name: "must trigger CustomPropertyEventPromoteToEnterprise",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventPromoteToEnterpriseAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventPromoteToEnterpriseAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString(CustomPropertyEventPromoteToEnterpriseAction)},
			},
			wantErr: false,
		},
		{
			name: "must fail CustomPropertyEventPromoteToEnterprise with empty action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventPromoteToEnterpriseAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventPromoteToEnterpriseAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString("")},
			},
			wantErr: true,
		},
		{
			name: "must fail CustomPropertyEventPromoteToEnterprise with nil action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventPromoteToEnterpriseAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventPromoteToEnterpriseAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
			},
			wantErr: true,
		},

		{
			name: "must trigger CustomPropertyEventUpdated",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventUpdatedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventUpdatedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString(CustomPropertyEventUpdatedAction)},
			},
			wantErr: false,
		},
		{
			name: "must fail CustomPropertyEventUpdated with empty action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventUpdatedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventUpdatedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: ptrString("")},
			},
			wantErr: true,
		},
		{
			name: "must fail CustomPropertyEventUpdated with nil action",
			fields: fields{
				handler: &EventHandler{
					WebhookSecret: "fake",
					onBeforeAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onBeforeAny called")
								return nil
							},
						},
					},
					onAfterAny: map[string][]EventHandleFunc{
						EventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event any) error {
								t.Log("onAfterAny called")
								return nil
							},
						},
					},
					onCustomPropertyEvent: map[string][]CustomPropertyEventHandleFunc{
						CustomPropertyEventAnyAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Log("onAny action called")
								return nil
							},
						},
						CustomPropertyEventUpdatedAction: {
							func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
								t.Logf("%s action called", CustomPropertyEventUpdatedAction)
								return nil
							},
						},
					},
				},
			},
			args: args{
				deliveryID: "42",
				eventName:  "custom_property",
				event:      &github.CustomPropertyEvent{Action: nil},
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := &EventHandler{
				WebhookSecret: "fake",
				mu:            sync.RWMutex{},
			}
			if err := g.CustomPropertyEvent(context.Background(), tt.args.deliveryID, tt.args.eventName, tt.args.event); (err != nil) != tt.wantErr {
				t.Errorf("CustomPropertyEvent() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}
