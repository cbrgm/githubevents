// Code generated by gen/generate.go. DO NOT EDIT.
// make edits in gen/generate.go

// Copyright 2022 The GithubEvents Authors. All rights reserved.
// Use of this source code is governed by the MIT License
// that can be found in the LICENSE file.

package githubevents

import (
	"context"
	"fmt"
	"github.com/google/go-github/v70/github"
	"golang.org/x/sync/errgroup"
)

// Actions are used to identify registered callbacks.
const (
	// CustomPropertyEvent is the event name of github.CustomPropertyEvent's
	CustomPropertyEvent = "custom_property"

	// CustomPropertyEventAnyAction is used to identify callbacks
	// listening to all events of type github.CustomPropertyEvent
	CustomPropertyEventAnyAction = "*"

	// CustomPropertyEventCreatedAction is used to identify callbacks
	// listening to events of type github.CustomPropertyEvent and action "created"
	CustomPropertyEventCreatedAction = "created"

	// CustomPropertyDeletedAction is used to identify callbacks
	// listening to events of type github.CustomPropertyEvent and action "deleted"
	CustomPropertyDeletedAction = "deleted"

	// CustomPropertyEventPromoteToEnterpriseAction is used to identify callbacks
	// listening to events of type github.CustomPropertyEvent and action "promote_to_enterprise"
	CustomPropertyEventPromoteToEnterpriseAction = "promote_to_enterprise"

	// CustomPropertyEventUpdatedAction is used to identify callbacks
	// listening to events of type github.CustomPropertyEvent and action "updated"
	CustomPropertyEventUpdatedAction = "updated"
)

// CustomPropertyEventHandleFunc represents a callback function triggered on github.CustomPropertyEvent's.
// 'deliveryID' (type: string) is the unique webhook delivery ID.
// 'eventName' (type: string) is the name of the event.
// 'event' (type: *github.CustomPropertyEvent) is the webhook payload.
type CustomPropertyEventHandleFunc func(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error

// OnCustomPropertyEventCreated registers callbacks listening to events of type github.CustomPropertyEvent and action 'created'.
//
// This function appends the callbacks passed as arguments to already existing ones.
// If already existing callbacks are to be overwritten, SetOnCustomPropertyEventCreated must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) OnCustomPropertyEventCreated(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventCreatedAction] = append(
		g.onCustomPropertyEvent[CustomPropertyEventCreatedAction],
		callbacks...,
	)
}

// SetOnCustomPropertyEventCreated registers callbacks listening to events of type github.CustomPropertyEvent and action 'created'
// and overwrites already registered callbacks.
//
// This function overwrites all previously registered callbacks.
// If already registered callbacks are not to be overwritten, OnCustomPropertyEventCreatedAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) SetOnCustomPropertyEventCreated(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventCreatedAction] = callbacks
}

func (g *EventHandler) handleCustomPropertyEventCreated(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
	if event == nil || event.Action == nil || *event.Action == "" {
		return fmt.Errorf("event action was empty or nil")
	}
	if CustomPropertyEventCreatedAction != *event.Action {
		return fmt.Errorf(
			"handleCustomPropertyEventCreated() called with wrong action, want %s, got %s",
			CustomPropertyEventCreatedAction,
			*event.Action,
		)
	}
	eg := new(errgroup.Group)
	for _, action := range []string{
		CustomPropertyEventCreatedAction,
		CustomPropertyEventAnyAction,
	} {
		if _, ok := g.onCustomPropertyEvent[action]; ok {
			for _, h := range g.onCustomPropertyEvent[action] {
				handle := h
				eg.Go(func() (err error) {
					defer func() {
						if r := recover(); r != nil {
							err = fmt.Errorf("recovered from panic: %v", r)
						}
					}()
					err = handle(ctx, deliveryID, eventName, event)
					if err != nil {
						return err
					}
					return nil
				})
			}
		}
	}
	if err := eg.Wait(); err != nil {
		return err
	}
	return nil
}

// OnCustomPropertyDeleted registers callbacks listening to events of type github.CustomPropertyEvent and action 'deleted'.
//
// This function appends the callbacks passed as arguments to already existing ones.
// If already existing callbacks are to be overwritten, SetOnCustomPropertyDeleted must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) OnCustomPropertyDeleted(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyDeletedAction] = append(
		g.onCustomPropertyEvent[CustomPropertyDeletedAction],
		callbacks...,
	)
}

// SetOnCustomPropertyDeleted registers callbacks listening to events of type github.CustomPropertyEvent and action 'deleted'
// and overwrites already registered callbacks.
//
// This function overwrites all previously registered callbacks.
// If already registered callbacks are not to be overwritten, OnCustomPropertyDeletedAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) SetOnCustomPropertyDeleted(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyDeletedAction] = callbacks
}

func (g *EventHandler) handleCustomPropertyDeleted(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
	if event == nil || event.Action == nil || *event.Action == "" {
		return fmt.Errorf("event action was empty or nil")
	}
	if CustomPropertyDeletedAction != *event.Action {
		return fmt.Errorf(
			"handleCustomPropertyDeleted() called with wrong action, want %s, got %s",
			CustomPropertyDeletedAction,
			*event.Action,
		)
	}
	eg := new(errgroup.Group)
	for _, action := range []string{
		CustomPropertyDeletedAction,
		CustomPropertyEventAnyAction,
	} {
		if _, ok := g.onCustomPropertyEvent[action]; ok {
			for _, h := range g.onCustomPropertyEvent[action] {
				handle := h
				eg.Go(func() (err error) {
					defer func() {
						if r := recover(); r != nil {
							err = fmt.Errorf("recovered from panic: %v", r)
						}
					}()
					err = handle(ctx, deliveryID, eventName, event)
					if err != nil {
						return err
					}
					return nil
				})
			}
		}
	}
	if err := eg.Wait(); err != nil {
		return err
	}
	return nil
}

// OnCustomPropertyEventPromoteToEnterprise registers callbacks listening to events of type github.CustomPropertyEvent and action 'promote_to_enterprise'.
//
// This function appends the callbacks passed as arguments to already existing ones.
// If already existing callbacks are to be overwritten, SetOnCustomPropertyEventPromoteToEnterprise must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) OnCustomPropertyEventPromoteToEnterprise(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventPromoteToEnterpriseAction] = append(
		g.onCustomPropertyEvent[CustomPropertyEventPromoteToEnterpriseAction],
		callbacks...,
	)
}

// SetOnCustomPropertyEventPromoteToEnterprise registers callbacks listening to events of type github.CustomPropertyEvent and action 'promote_to_enterprise'
// and overwrites already registered callbacks.
//
// This function overwrites all previously registered callbacks.
// If already registered callbacks are not to be overwritten, OnCustomPropertyEventPromoteToEnterpriseAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) SetOnCustomPropertyEventPromoteToEnterprise(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventPromoteToEnterpriseAction] = callbacks
}

func (g *EventHandler) handleCustomPropertyEventPromoteToEnterprise(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
	if event == nil || event.Action == nil || *event.Action == "" {
		return fmt.Errorf("event action was empty or nil")
	}
	if CustomPropertyEventPromoteToEnterpriseAction != *event.Action {
		return fmt.Errorf(
			"handleCustomPropertyEventPromoteToEnterprise() called with wrong action, want %s, got %s",
			CustomPropertyEventPromoteToEnterpriseAction,
			*event.Action,
		)
	}
	eg := new(errgroup.Group)
	for _, action := range []string{
		CustomPropertyEventPromoteToEnterpriseAction,
		CustomPropertyEventAnyAction,
	} {
		if _, ok := g.onCustomPropertyEvent[action]; ok {
			for _, h := range g.onCustomPropertyEvent[action] {
				handle := h
				eg.Go(func() (err error) {
					defer func() {
						if r := recover(); r != nil {
							err = fmt.Errorf("recovered from panic: %v", r)
						}
					}()
					err = handle(ctx, deliveryID, eventName, event)
					if err != nil {
						return err
					}
					return nil
				})
			}
		}
	}
	if err := eg.Wait(); err != nil {
		return err
	}
	return nil
}

// OnCustomPropertyEventUpdated registers callbacks listening to events of type github.CustomPropertyEvent and action 'updated'.
//
// This function appends the callbacks passed as arguments to already existing ones.
// If already existing callbacks are to be overwritten, SetOnCustomPropertyEventUpdated must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) OnCustomPropertyEventUpdated(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventUpdatedAction] = append(
		g.onCustomPropertyEvent[CustomPropertyEventUpdatedAction],
		callbacks...,
	)
}

// SetOnCustomPropertyEventUpdated registers callbacks listening to events of type github.CustomPropertyEvent and action 'updated'
// and overwrites already registered callbacks.
//
// This function overwrites all previously registered callbacks.
// If already registered callbacks are not to be overwritten, OnCustomPropertyEventUpdatedAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) SetOnCustomPropertyEventUpdated(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventUpdatedAction] = callbacks
}

func (g *EventHandler) handleCustomPropertyEventUpdated(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
	if event == nil || event.Action == nil || *event.Action == "" {
		return fmt.Errorf("event action was empty or nil")
	}
	if CustomPropertyEventUpdatedAction != *event.Action {
		return fmt.Errorf(
			"handleCustomPropertyEventUpdated() called with wrong action, want %s, got %s",
			CustomPropertyEventUpdatedAction,
			*event.Action,
		)
	}
	eg := new(errgroup.Group)
	for _, action := range []string{
		CustomPropertyEventUpdatedAction,
		CustomPropertyEventAnyAction,
	} {
		if _, ok := g.onCustomPropertyEvent[action]; ok {
			for _, h := range g.onCustomPropertyEvent[action] {
				handle := h
				eg.Go(func() (err error) {
					defer func() {
						if r := recover(); r != nil {
							err = fmt.Errorf("recovered from panic: %v", r)
						}
					}()
					err = handle(ctx, deliveryID, eventName, event)
					if err != nil {
						return err
					}
					return nil
				})
			}
		}
	}
	if err := eg.Wait(); err != nil {
		return err
	}
	return nil
}

// OnCustomPropertyEventAny registers callbacks listening to any events of type github.CustomPropertyEvent
//
// This function appends the callbacks passed as arguments to already existing ones.
// If already existing callbacks are to be overwritten, SetOnCustomPropertyEventAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) OnCustomPropertyEventAny(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventAnyAction] = append(
		g.onCustomPropertyEvent[CustomPropertyEventAnyAction],
		callbacks...,
	)
}

// SetOnCustomPropertyEventAny registers callbacks listening to any events of type github.CustomPropertyEvent
// and overwrites already registered callbacks.
//
// This function overwrites all previously registered callbacks.
// If already registered callbacks are not to be overwritten, OnCustomPropertyEventAny must be used.
//
// Callbacks are executed in parallel. This function blocks until all callbacks executed in parallel have returned,
// then returns the first non-nil error (if any) from them. If OnError callbacks have been set, they will be called when an error occurs.
//
// Reference: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#custom_property
func (g *EventHandler) SetOnCustomPropertyEventAny(callbacks ...CustomPropertyEventHandleFunc) {
	g.mu.Lock()
	defer g.mu.Unlock()
	if callbacks == nil || len(callbacks) == 0 {
		panic("callbacks is nil or empty")
	}
	if g.onCustomPropertyEvent == nil {
		g.onCustomPropertyEvent = make(map[string][]CustomPropertyEventHandleFunc)
	}
	g.onCustomPropertyEvent[CustomPropertyEventAnyAction] = callbacks
}

func (g *EventHandler) handleCustomPropertyEventAny(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {
	if event == nil {
		return fmt.Errorf("event was empty or nil")
	}
	if _, ok := g.onCustomPropertyEvent[CustomPropertyEventAnyAction]; !ok {
		return nil
	}
	eg := new(errgroup.Group)
	for _, h := range g.onCustomPropertyEvent[CustomPropertyEventAnyAction] {
		handle := h
		eg.Go(func() (err error) {
			defer func() {
				if r := recover(); r != nil {
					err = fmt.Errorf("recovered from panic: %v", r)
				}
			}()
			err = handle(ctx, deliveryID, eventName, event)
			if err != nil {
				return err
			}
			return nil
		})
	}
	if err := eg.Wait(); err != nil {
		return err
	}
	return nil
}

// CustomPropertyEvent handles github.CustomPropertyEvent.
//
// Callbacks are executed in the following order:
//
// 1) All callbacks registered with OnBeforeAny are executed in parallel.
// 2) All callbacks registered with OnCustomPropertyEvent... are executed in parallel in case the Event has actions.
// 3) All callbacks registered with OnAfterAny are executed in parallel.
//
// on any error all callbacks registered with OnError are executed in parallel.
func (g *EventHandler) CustomPropertyEvent(ctx context.Context, deliveryID string, eventName string, event *github.CustomPropertyEvent) error {

	if event == nil || event.Action == nil || *event.Action == "" {
		return fmt.Errorf("event action was empty or nil")
	}
	action := *event.Action

	err := g.handleBeforeAny(ctx, deliveryID, eventName, event)
	if err != nil {
		return g.handleError(ctx, deliveryID, eventName, event, err)
	}

	switch action {

	case CustomPropertyEventCreatedAction:
		err := g.handleCustomPropertyEventCreated(ctx, deliveryID, eventName, event)
		if err != nil {
			return g.handleError(ctx, deliveryID, eventName, event, err)
		}

	case CustomPropertyDeletedAction:
		err := g.handleCustomPropertyDeleted(ctx, deliveryID, eventName, event)
		if err != nil {
			return g.handleError(ctx, deliveryID, eventName, event, err)
		}

	case CustomPropertyEventPromoteToEnterpriseAction:
		err := g.handleCustomPropertyEventPromoteToEnterprise(ctx, deliveryID, eventName, event)
		if err != nil {
			return g.handleError(ctx, deliveryID, eventName, event, err)
		}

	case CustomPropertyEventUpdatedAction:
		err := g.handleCustomPropertyEventUpdated(ctx, deliveryID, eventName, event)
		if err != nil {
			return g.handleError(ctx, deliveryID, eventName, event, err)
		}

	default:
		err := g.handleCustomPropertyEventAny(ctx, deliveryID, eventName, event)
		if err != nil {
			return g.handleError(ctx, deliveryID, eventName, event, err)
		}
	}

	err = g.handleAfterAny(ctx, deliveryID, eventName, event)
	if err != nil {
		return g.handleError(ctx, deliveryID, eventName, event, err)
	}
	return nil
}
